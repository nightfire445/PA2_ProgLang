module dna;
import java.io.*;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
/* InversionCount.salsa -- Count the number of DNA inversions

*/




behavior InversionCount { 

    void test(Object[] answer, char[] target_sequence){

        boolean test = target_sequence == answer[0];
        assert test;

    }


    int[] target_indices(String input, String target) {
    Queue a_indices = new LinkedList();
    Queue t_indices = new LinkedList();
    Queue c_indices = new LinkedList();
    Queue g_indices = new LinkedList();

    
    int[] target_indices = new int[input.length()];

    for (Integer i = 0; i < target.length(); i++) {
        char c = target.charAt(i);
        if (c == 'a') {
            a_indices.add(i);
        } else if (c == 't') {
            t_indices.add(i);
        } else if (c == 'c') {
            c_indices.add(i);
        } else if (c == 'g') {
            g_indices.add(i);
        }
    }

    for (Integer i = 0; i < input.length(); i++) {
        char c = input.charAt(i);
        if (c == 'a') {
            target_indices[i] = a_indices.remove();
        } else if (c == 't') {
            target_indices[i] = t_indices.remove();
        } else if (c == 'c') {
            target_indices[i] = c_indices.remove();
        } else if (c == 'g') {
            target_indices[i] = g_indices.remove();
        }
    }

    return target_indices;
}



	void act(String args[]){


		if(args.length == 0){
			
			System.out.println("Proper Usage is: salsa dna.InversionCount input.txt");
	        System.exit(0);

		}


		Reader fileReader = new FileReader(args[0]);
		//Input File: 
		//Input Sequence
		//Target Sequence

		char[] input_sequence;
        char[] target_sequence;
        fileReader.read(input_sequence);
        fileReader.read(target_sequence);
        
		fileReader.close();

		InversionCountWorker kickoff = new InversionCountWorker( input_sequence, target_indices(  input_sequence.toString(), target_sequence.toString()  ).toString().toCharArray() );
	
    	token answer = kickoff <- recursive_count();
        test(answer, target_sequence) @ currentContinuation;
		
        System.out.print("Input, InversinCount, Target : ");
        System.out.print(answer); 
      
	}



}



